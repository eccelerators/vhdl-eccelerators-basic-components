-- Copyright (C) 2023 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler v0.0.0-0000000
-- VHDL Extension for HxS v0.0.0-0000000
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.RamIfcPackage.all;

entity RamBlk_RamIfc is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		ReadMatch : out std_logic;
		ReadAck : out std_logic;
		ReadData : out std_logic_vector(31 downto 0);
		ReadResp : out std_logic_vector(1 downto 0);
		Read : in std_logic;
		ReadAddressMatch : in std_logic;
		ReadAddressProt : in std_logic_vector(2 downto 0);
		ReadAddress : in std_logic_vector(10 downto 0);
		WriteMatch : out std_logic;
		WriteAck : out std_logic;
		WriteResp : out std_logic_vector(1 downto 0);
		Write : in std_logic;
		WriteAddrMatch : in std_logic;
		WriteAddressProt : in std_logic_vector(2 downto 0);
		WriteAddress : in std_logic_vector(10 downto 0);
		WriteData : in std_logic_vector(31 downto 0);
		WriteStrobe : in std_logic_vector(3 downto 0);
		DataToBeRead : in std_logic_vector(31 downto 0);
		DataWritten : out std_logic_vector(31 downto 0);
		RTransPulseRam : out std_logic;
		WRegPulseRam : out std_logic;
		ExtReadAckRam : in std_logic;
		ExtWriteAckRam : in std_logic;
		RamAddress : out std_logic_vector(10 downto 0);
		RamByteSelect  : out std_logic_vector(3 downto 0)
	);
end;

architecture Behavioural of RamBlk_RamIfc is

	signal PreReadData : std_logic_vector(31 downto 0);
	
	signal PreReadDataRam : std_logic_vector(31 downto 0);
	signal PreReadAckRam : std_logic;
	signal PreWriteAckRam : std_logic;
	signal PreMatchReadRam : std_logic;
	signal PreMatchWriteRam : std_logic;
	signal WriteDiffRam : std_logic;
	signal ReadDiffRam : std_logic;
	signal DelWriteDiffRam : std_logic;
	signal ReadDecRam : std_logic_vector(1 downto 0);
	signal WriteDecRam : std_logic_vector(1 downto 0);
	signal WRegDataWritten : std_logic_vector(31 downto 0);

begin

	ReadMatch <= PreMatchReadRam;
	WriteMatch <= PreMatchWriteRam;
	
	ReadAck <= PreReadAckRam;
	
	WriteAck <= PreWriteAckRam;
	
	
	ReadData <= PreReadData;
	
	ReadResp <= (others => '0');
	WriteResp <= (others => '0');
	
	PreDatOutMux: process (
		PreReadDataRam,
		PreMatchReadRam,
		PreReadAckRam
	) begin
		PreReadData <= (others => '0');
		if (PreMatchReadRam = '1' and PreReadAckRam = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataRam), PreReadData'LENGTH));
		end if;
	end process;
	
	PreMatchReadRamProcess : process (ReadAddress, ReadAddressMatch)
	begin
		--if ((unsigned(ReadAddress)/4)*4 = unsigned(RAM_ADDRESS)) then
			PreMatchReadRam <= ReadAddressMatch;
		--else
			-- PreMatchReadRam <= '0';
		--end if;
	end process;
	
	PreMatchWriteRamProcess : process (WriteAddress, WriteAddrMatch)
	begin
		--if ((unsigned(WriteAddress)/4)*4 = unsigned(RAM_ADDRESS)) then
			PreMatchWriteRam <= WriteAddrMatch;
		--else
			-- PreMatchWriteRam <= '0';
		--end if;
	end process;
	
	WriteDiffRam <= WriteDecRam(1) and not WriteDecRam(0);
	ReadDiffRam <= ReadDecRam(1) and not ReadDecRam(0);
	
	SyncPartRam : process (Clk, Rst)
	begin
		if (Rst = '1') then
			ReadDecRam <= (others => '0');
			WriteDecRam <= (others => '0');
			DelWriteDiffRam <= '0'; 
			PreReadAckRam <= '0';
			PreWriteAckRam <= '0';
			WRegDataWritten <= (others => '0');
			RamAddress <= (others => '0');
			RamByteSelect <= (others => '0');
		elsif rising_edge(Clk) then
			PreReadAckRam <= ExtReadAckRam and ReadDecRam(0);
			PreWriteAckRam <= ExtWriteAckRam and WriteDecRam(0);
			ReadDecRam(0) <= ReadDecRam(1); 
			-- if ((unsigned(ReadAddress)/4)*4 = unsigned(RAM_ADDRESS)) then
				ReadDecRam(1) <= Read;
			-- else
				-- ReadDecRam(1) <= '0';				
			-- end if;
			WriteDecRam(0) <= WriteDecRam(1);
			-- if ((unsigned(WriteAddress)/4)*4 = unsigned(RAM_ADDRESS)) then
				WriteDecRam(1) <=  Write;
			-- else
			-- 	WriteDecRam(1) <= '0';
			--end if;
			DelWriteDiffRam <= WriteDiffRam;
			if (WriteDiffRam = '1') then
				if (WriteStrobe(3) = '1') then WRegDataWritten(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegDataWritten(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegDataWritten(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegDataWritten(7 downto 0) <= WriteData(7 downto 0); end if;
				RamAddress <= WriteAddress;
				RamByteSelect <= WriteStrobe;
			end if;
            if (ReadDiffRam = '1') then
                RamAddress <= ReadAddress;
            end if;
		end if;
	end process;
	
	DataOutPreMuxForRam : process (
		DataToBeRead
	) begin
		PreReadDataRam <= (others => '0');
		PreReadDataRam(31 downto 0) <= DataToBeRead;
	end process;
	
	RTransPulseRam <= ReadDiffRam;
	
	WRegPulseRam <= DelWriteDiffRam;
	
	DataWritten <= WRegDataWritten;
	
end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

entity RamIfcAxi4LiteBusController is
	port(
		Clk : in std_logic;
		Rst : in std_logic;
		AWVALID : in std_logic;
		AWADDR : in std_logic_vector(10 downto 0);
		AWPROT : in std_logic_vector(2 downto 0);
		AWREADY : out std_logic;
		WVALID : in std_logic;
		WDATA : in std_logic_vector(31 downto 0);
		WSTRB : in std_logic_vector(3 downto 0);
		WREADY : out std_logic;
		BREADY : in std_logic;
		BVALID : out std_logic;
		BRESP : out std_logic_vector(1 downto 0);
		ARVALID : in std_logic;
		ARADDR : in std_logic_vector(10 downto 0);
		ARPROT : in std_logic_vector(2 downto 0);
		ARREADY : out std_logic;
		RREADY : in std_logic;
		RVALID : out std_logic;
		RDATA : out std_logic_vector(31 downto 0);
		RRESP : out std_logic_vector(1 downto 0);
		WritePrivileged : out std_logic;
		WriteSecure : out std_logic;
		WriteInstruction : out std_logic;
		ReadPrivileged : out std_logic;
		ReadSecure : out std_logic;
		ReadInstruction : out std_logic;
		ReadMatch : in std_logic;
		ReadAck : in std_logic;
		ReadData : in std_logic_vector(31 downto 0);
		ReadResp : in std_logic_vector(1 downto 0);
		Read : out std_logic;
		ReadAddressMatch : out std_logic;
		ReadAddressProt : out std_logic_vector(2 downto 0);
		ReadAddress : out std_logic_vector(10 downto 0);
		WriteMatch : in std_logic;
		WriteAck : in std_logic;
		WriteResp : in std_logic_vector(1 downto 0);
		Write : out std_logic;
		WriteAddrMatch : out std_logic;
		WriteAddressProt : out std_logic_vector(2 downto 0);
		WriteAddress : out std_logic_vector(10 downto 0);
		WriteData : out std_logic_vector(31 downto 0);
		WriteStrobe : out std_logic_vector(3 downto 0);
		UnoccupiedAck : out std_logic;
		TimeoutAck : out std_logic
	);
end;

architecture Behavioural of RamIfcAxi4LiteBusController is

	type T_Axi4LiteWriteState is (
		Axi4LiteWriteStateIdle,
		Axi4LiteWriteStateAddress,
		Axi4LiteWriteStateData,
		Axi4LiteWriteStateResp,
		Axi4LiteWriteStateErrorResp,
		Axi4LiteWriteStateDone
	);

	type T_Axi4LiteReadState is (
		Axi4LiteReadStateIdle,
		Axi4LiteReadStateAddress,
		Axi4LiteReadStateData,
		Axi4LiteReadStateDone
	);

	signal Axi4LiteReadState : T_Axi4LiteReadState;
	signal Axi4LiteWriteState : T_Axi4LiteWriteState;

	signal ReadTimeoutCounter : unsigned(9 downto 0);
	signal WriteTimeoutCounter : unsigned(9 downto 0);

	signal ReadUnoccupiedAck : std_logic;
	signal WriteUnoccupiedAck : std_logic;
	signal ReadTimeoutAck : std_logic;
	signal WriteTimeoutAck : std_logic;
	
	signal ReadProtect : std_logic_vector(2 downto 0);
	signal WriteProtect : std_logic_vector(2 downto 0);

begin

	UnoccupiedAck <= ReadUnoccupiedAck or WriteUnoccupiedAck;
	TimeoutAck <= ReadTimeoutAck or WriteTimeoutAck;

	WritePrivileged <= WriteProtect(0);
	WriteSecure <= WriteProtect(1);
	WriteInstruction <= WriteProtect(2);
	ReadPrivileged <= ReadProtect(0);
	ReadSecure <= ReadProtect(1);
	ReadInstruction <= ReadProtect(2);
	
	WriteAddressProt <= WriteProtect;
	ReadAddressProt <= ReadProtect;

	Axi4LiteRead : process(Clk, Rst) is
	begin
		if Rst = '1' then
			ARREADY <= '0';
			RVALID <= '0';
			RDATA <= (others => '0');
			RRESP <= (others => '0');
			Read <= '0';
			ReadAddressMatch <= '0';
			ReadAddress <= (others => '0');
			ReadProtect <= (others => '0');
			ReadUnoccupiedAck <= '0';
			ReadTimeoutAck <= '0';
			ReadTimeoutCounter <= (others => '1');
			Axi4LiteReadState <= Axi4LiteReadStateIdle;
		elsif rising_edge(Clk) then
			ARREADY <= '0';
			RVALID <= '0';
			case Axi4LiteReadState is
				when Axi4LiteReadStateIdle =>
					ReadUnoccupiedAck <= '0';
					ReadTimeoutAck <= '0';
					ReadTimeoutCounter <= (others => '1');
					Read <= '0';
					ReadAddressMatch <= '0';
					ReadAddress <= (others => '0');
					ReadProtect <= (others => '0');
					if ARVALID = '1' then
						ReadAddress <= ARADDR;
						ReadProtect <= ARPROT;
						ReadAddressMatch <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateAddress;
					end if;
				when Axi4LiteReadStateAddress =>
					ARREADY <= '1';
					Axi4LiteReadState <= Axi4LiteReadStateData;
					if ReadMatch = '1' then
						Read <= '1';
					else
						ReadUnoccupiedAck <= '1';
					end if;
				when Axi4LiteReadStateData =>
					ReadTimeoutCounter <= ReadTimeoutCounter - 1;
					RDATA <= ReadData;
					RRESP <= ReadResp;
					if ReadAck = '1' then
						ReadAddressMatch <= '0';
						RVALID <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadUnoccupiedAck = '1' then
						RRESP <= "11";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadTimeoutCounter = 0 then
						ReadTimeoutAck <= '1';
						RRESP <= "10";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
				when Axi4LiteReadStateDone =>
					RVALID <= '1';
					if RREADY = '1' then
						RVALID <= '0';
						ReadAddress <= (others => '0');
						ReadProtect <= (others => '0');
						RRESP <= (others => '0');
						Read <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateIdle;
					end if;
			end case;
		end if;
	end process;

	Axi4LiteWrite : process(Clk, Rst) is
	begin
		if Rst = '1' then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			BRESP <= (others => '0');
			Write <= '0';
			WriteAddrMatch <= '0';
			WriteAddress <= (others => '0');
			WriteProtect <= (others => '0');
			WriteData <= (others => '0');
			WriteStrobe <= (others => '0');
			WriteUnoccupiedAck <= '0';
			WriteTimeoutAck <= '0';
			WriteTimeoutCounter <= (others => '1');
			Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
		elsif rising_edge(Clk) then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			case Axi4LiteWriteState is
				when Axi4LiteWriteStateIdle =>
					WriteUnoccupiedAck <= '0';
					WriteTimeoutAck <= '0';
					WriteTimeoutCounter <= (others => '1');
					Write <= '0';
					WriteAddrMatch <= '0';
					WriteAddress <= (others => '0');
					WriteProtect <= (others => '0');
					if AWVALID = '1' then
						WriteAddress <= AWADDR;
						WriteProtect <= AWPROT;
						WriteAddrMatch <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateAddress;
					end if;
				when Axi4LiteWriteStateAddress =>
					AWREADY <= '1';
					WREADY <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateData;
					if WriteMatch = '0' then
						WriteUnoccupiedAck <= '1';
					end if;
				when Axi4LiteWriteStateData =>
					WREADY <= '1';
					WriteData <= WDATA;
					WriteStrobe <= WSTRB;
					if WVALID = '1' then
						WREADY <= '0';
						if WriteUnoccupiedAck = '0' then
							Write <= '1';
							Axi4LiteWriteState <= Axi4LiteWriteStateResp;
						else
							Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
						end if;
					end if;
				when Axi4LiteWriteStateResp =>
					WriteTimeoutCounter <= WriteTimeoutCounter - 1;
					Write <= '1';
					BRESP <= WriteResp;
					if WriteAck = '1' then
						Write <= '0';
						WriteAddrMatch <= '0';
						BVALID <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					end if;
					if WriteTimeoutCounter = 0 then
						WriteTimeoutAck <= '1';
						Write <= '0';
						WriteAddrMatch <= '0';
						Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
					end if;
				when Axi4LiteWriteStateErrorResp =>
					Write <= '0';
					WriteAddrMatch <= '0';
					BVALID <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					if WriteUnoccupiedAck = '1' then
						BRESP <= "11";
					else
						BRESP <= "10";
					end if;
				when Axi4LiteWriteStateDone =>
					BVALID <= '1';
					if BREADY = '1' then
						WriteAddress <= (others => '0');
						WriteProtect <= (others => '0');
						BVALID <= '0';
						BRESP <= (others => '0');
						Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
					end if;
			end case;
		end if;
	end process;

end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.RamIfcPackage.all;

entity RamIfcAxi4Lite is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Axi4LiteDown : in T_RamIfcAxi4LiteDown;
		Axi4LiteUp : out T_RamIfcAxi4LiteUp;
		Axi4LiteAccess : out T_RamIfcAxi4LiteAccess;
		Trace : out T_RamIfcTrace;
		RamBlkDown : out T_RamIfcRamBlkDown;
		RamBlkUp : in T_RamIfcRamBlkUp
	);
end;

architecture Behavioural of RamIfcAxi4Lite is

	signal PreAxi4LiteUp : T_RamIfcAxi4LiteUp;
	signal PreAxi4LiteAccess : T_RamIfcAxi4LiteAccess;
	
	signal UnoccupiedAck : std_logic;
	signal TimeoutAck : std_logic;
	
	signal ReadMatch : std_logic;
	signal ReadAck : std_logic;
	signal ReadData : std_logic_vector(31 downto 0);
	signal ReadResp : std_logic_vector(1 downto 0);
	signal Read : std_logic;
	signal ReadAddressMatch : std_logic;
	signal ReadAddressProt : std_logic_vector(2 downto 0);
	signal ReadAddress : std_logic_vector(10 downto 0);
	signal WriteMatch : std_logic;
	signal WriteAck : std_logic;
	signal WriteResp : std_logic_vector(1 downto 0);
	signal Write : std_logic;
	signal WriteAddrMatch : std_logic;
	signal WriteAddressProt : std_logic_vector(2 downto 0);
	signal WriteAddress : std_logic_vector(10 downto 0);
	signal WriteData : std_logic_vector(31 downto 0);
	signal WriteStrobe : std_logic_vector(3 downto 0);
	
	signal RamBlkReadMatch : std_logic;
	signal RamBlkReadAck : std_logic;
	signal RamBlkReadData : std_logic_vector(31 downto 0);
	signal RamBlkReadResp : std_logic_vector(1 downto 0);
	signal RamBlkWriteMatch : std_logic;
	signal RamBlkWriteAck : std_logic;
	signal RamBlkWriteResp : std_logic_vector(1 downto 0);

begin

	i_RamIfcAxi4LiteBusController : entity work.RamIfcAxi4LiteBusController
		port map (
			Clk => Clk,
			Rst => Rst,
			AWVALID => Axi4LiteDown.AWVALID,
			AWADDR => Axi4LiteDown.AWADDR,
			AWPROT => Axi4LiteDown.AWPROT,
			AWREADY => PreAxi4LiteUp.AWREADY,
			WVALID => Axi4LiteDown.WVALID,
			WDATA => Axi4LiteDown.WDATA,
			WSTRB => Axi4LiteDown.WSTRB,
			WREADY => PreAxi4LiteUp.WREADY,
			BREADY => Axi4LiteDown.BREADY,
			BVALID => PreAxi4LiteUp.BVALID,
			BRESP => PreAxi4LiteUp.BRESP,
			ARVALID => Axi4LiteDown.ARVALID,
			ARADDR => Axi4LiteDown.ARADDR,
			ARPROT => Axi4LiteDown.ARPROT,
			ARREADY => PreAxi4LiteUp.ARREADY,
			RREADY => Axi4LiteDown.RREADY,
			RVALID => PreAxi4LiteUp.RVALID,
			RDATA => PreAxi4LiteUp.RDATA,
			RRESP => PreAxi4LiteUp.RRESP,
			WritePrivileged => PreAxi4LiteAccess.WritePrivileged,
			WriteSecure => PreAxi4LiteAccess.WriteSecure,
			WriteInstruction => PreAxi4LiteAccess.WriteInstruction,
			ReadPrivileged => PreAxi4LiteAccess.ReadPrivileged,
			ReadSecure => PreAxi4LiteAccess.ReadSecure,
			ReadInstruction => PreAxi4LiteAccess.ReadInstruction,
			ReadMatch => ReadMatch,
			ReadAck => ReadAck,
			ReadData => ReadData,
			ReadResp => ReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => WriteMatch,
			WriteAck => WriteAck,
			WriteResp => WriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteStrobe => WriteStrobe,
			UnoccupiedAck => UnoccupiedAck,
			TimeoutAck => TimeoutAck
		);
	
	i_RamBlk_RamIfc : entity work.RamBlk_RamIfc
		port map (
			Clk => Clk,
			Rst => Rst,
			ReadMatch => RamBlkReadMatch,
			ReadAck => RamBlkReadAck,
			ReadData => RamBlkReadData,
			ReadResp => RamBlkReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => RamBlkWriteMatch,
			WriteAck => RamBlkWriteAck,
			WriteResp => RamBlkWriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteStrobe => WriteStrobe,
			DataToBeRead => RamBlkUp.DataToBeRead,
			DataWritten => RamBlkDown.DataWritten,
			RTransPulseRam => RamBlkDown.RTransPulseRam,
			WRegPulseRam => RamBlkDown.WRegPulseRam,
			ExtReadAckRam => RamBlkUp.ExtReadAckRam,
			ExtWriteAckRam => RamBlkUp.ExtWriteAckRam,
            RamAddress => RamBlkDown.RamAddress,
            RamByteSelect  => RamBlkDown.RamByteSelect
		);
	
	Axi4LiteUp <= PreAxi4LiteUp;
	Axi4LiteAccess <= PreAxi4LiteAccess;
	
	Trace.Axi4LiteDown <= Axi4LiteDown;
	Trace.Axi4LiteUp <= PreAxi4LiteUp;
	Trace.Axi4LiteAccess <= PreAxi4LiteAccess;
	Trace.UnoccupiedAck <= UnoccupiedAck;
	Trace.TimeoutAck <= TimeoutAck;
	
	ReadMatch <= RamBlkReadMatch;
	ReadAck <= RamBlkReadAck;
	ReadResp <= RamBlkReadResp;
	ReadData <= RamBlkReadData;
	WriteMatch <= RamBlkWriteMatch;
	WriteAck <= RamBlkWriteAck;
	WriteResp <= RamBlkWriteResp;

end;
